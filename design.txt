To start off, I used 'http://bostonfeed.me/backend/getLocation.php' to pull my foodtruck data from.I orginally used a different source but the data wasn't as complete and required a lot of manual intervention to make it usable. I mirrored my database off of its columns and iterated through the json to add rows to the Truck table. I ended up using Postgres for my database because I have always worked with it with Rails apps and it has performed well for me.

For the map portion of the app, I used Leaflet, which is a Javascript library for maps which is backed by Mapbox. I had used it before and I enjoyed the simplicity of it. Essentially, you specify what coordinates you want your map to start on, pass some data from your application(in my case, the latitude and longitude of each food truck and some details about the truck), and then it sets up pointers on the map for you.

My app is designed to meet a couple of functions. A user should be able to search for a foodtruck based on day, name of foodtruck, location, or cuisine and have displayed on the map all of the food trucks that suit that critera. Rails works on a MVC model so the search function was implemented within the Truck model. It creates an array of foodtrucks which is sent to the index method of the TrucksController, which puts that data in a format that the foodtrucks.js can use it to create the pins on the map and puts it in an array that is then passed to foodtruck.js who populates the pins on the map div within foodtrucks/index.html.erb. This is also the same page that has the pop up modal that allows you to do the search for the foodtrucks. The GET request is designed to pass two variables through, the content of the search and the type of search, to make it easier to do searches on particular columns in the database.

I ran into a couple of problems with coding this app that I wasn't able to solve and hence i coded around them. Anytime the page loads, either due to refresh or the search button was clicked, foodtrucks/index.html.erb tries to load which calls the Foodtrucks Controller which calls index which tries to find food trucks. For every request, it was calling the FoodTrucks Controller twice which meant that the pins were never loading because the second call would have no search value so no food trucks would be found. I put some if statements around the search function to check if the @trucks array was intialized and also check if search was nil. If those conditions were true, it would keep the full array of trucks that it gained in the first pass and the pins would populate on the map correctly.

I had some problems with some race conditions with particular search parameters. The pins would never populate on the map because when the javascript was trying to load the pins on the map, the data wasn't yet in the @geojson array to provide that information. Therefore I added a sleep at the end of the search function to try to buy some time back. Although this makes the page look a little bit awkward because the map sometimes loads before the pins load, this gurantees that the pins do load.

Additionally, the search function is not as good as I would have liked. It is aware of capitalization. I had put in code to fix that which worked well locally but broke when I deployed to heroku so it was taken out.


